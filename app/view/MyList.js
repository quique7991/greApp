/*
 * File: app/view/MyList.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyList', {
    extend: 'Ext.dataview.List',
    alias: 'widget.mylist',

    config: {
        id: 'myList',
        store: 'MyXmlStore',
        grouped: true,
        indexBar: true,
        itemTpl: [
            '<div> <font size="5">{word} </font> <b> <br> Definition: </b> <i>{definition} </i> <br> <b> Type: </b> <i>{type} </i> </div>'
        ],
        items: [
            {
                xtype: 'toolbar',
                docked: 'top',
                itemId: 'mytoolbar',
                title: 'Words',
                items: [
                    {
                        xtype: 'button',
                        handler: function(button, event) {
                            Ext.getCmp('tabPanel').setActiveItem(Ext.getCmp('myContainer'));
                        },
                        text: 'Back'
                    }
                ],
                listeners: [
                    {
                        fn: function(component, eOpts) {
                            this.element.on('tap',function(){
                                store = Ext.getStore('MyXmlStore');//getting the store that drives the xml store
                                store.load();
                            });

                        },
                        event: 'initialize'
                    }
                ]
            },
            {
                xtype: 'searchfield',
                centered: false,
                docked: 'top',
                itemId: 'mysearchfield',
                label: 'Search'
            }
        ],
        listeners: [
            {
                fn: 'onMysearchfieldKeyup',
                event: 'keyup',
                delegate: '#mysearchfield'
            },
            {
                fn: 'onMysearchfieldClearicontap',
                event: 'clearicontap',
                delegate: '#mysearchfield'
            },
            {
                fn: 'onMyListInitialize',
                event: 'initialize'
            }
        ]
    },

    onMysearchfieldKeyup: function(textfield, e, eOpts) {
        var value = textfield.getValue();//Get the textfield value;
        store = Ext.getStore('MyXmlStore');//getting the store that drives the xml store

        //store.clearFilter();
        if(value!==''){
            store.filter("word",value);
        }
        else{	
            store.clearFilter();
            //    store.destroy();
            //    store = Ext.create('Ext.data.Store',{model: 'MyApp.model.RSSModel'});
        }

    },

    onMysearchfieldClearicontap: function(textfield, e, eOpts) {
        store = Ext.getStore('MyXmlStore');
        store.clearFilter();
    },

    onMyListInitialize: function(component, eOpts) {
        this.setLoadingText(null);
    }

});